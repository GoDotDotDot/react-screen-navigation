{"version":3,"sources":["logo.svg","history.js","detail.js","weekly.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","history","createHistory","DetaiPage","params","this","props","console","log","id","name","react_default","a","createElement","className","Component","WeeklyPage","PureComponent","App","goToDetailPage","go","_this","goToWeeklyPage","lib","path","component","DetailPage","onClick","withScreen","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iJCGzBC,QADCC,gDCkBDC,mLAjBJ,IACCC,EAAWC,KAAKC,MAAhBF,OACRG,QAAQC,IAAIH,KAAKC,OAFV,IAGCG,EAAaL,EAAbK,GAAIC,EAASN,EAATM,KACZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,wDAGAF,EAAAC,EAAAC,cAAA,wDACAF,EAAAC,EAAAC,cAAA,iBAASJ,GACTE,EAAAC,EAAAC,cAAA,mBAAWH,WAZKK,aCYTC,mLAVX,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,4EAJiBI,iBCOnBC,0NACJC,eAAiB,YAEfC,EADeC,EAAKf,MAAZc,IACL,SAAU,CAAEX,GAAI,EAAGC,KAAM,mBAE9BY,eAAiB,YAEfF,EADeC,EAAKf,MAAZc,IACL,mFAGH,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAQC,KAAK,SAASC,UAAWC,IACjCf,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAQC,KAAK,SAASC,UAAWT,IACjCL,EAAAC,EAAAC,cAAA,4DACAF,EAAAC,EAAAC,cAAA,UAAQc,QAAStB,KAAKc,gBAAtB,4BACAR,EAAAC,EAAAC,cAAA,UAAQc,QAAStB,KAAKiB,gBAAtB,oCAhBUP,cAsBHa,cAAWV,GCnBNW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACPxB,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAgBtB,QAASA,GACvBU,EAAAC,EAAAC,cAACuB,EAAD,OAEFC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0cb1316c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import createHistory from 'history/createBrowserHistory';\n\nconst history = createHistory();\nexport default history;\n","import React, { Component } from 'react';\n\nclass DetaiPage extends Component {\n  render() {\n    const { params } = this.props;\n    console.log(this.props);\n    const { id, name } = params;\n    return (\n      <div className=\"App\">\n        <h1>\n          这里是详情页面\n        </h1>\n        <h2>接收到的参数：</h2>\n        <h5>id: {id}</h5>\n        <h5>name: {name}</h5>\n      </div>\n    );\n  }\n}\n\nexport default DetaiPage;\n","import React, { PureComponent } from 'react';\n\nclass WeeklyPage extends PureComponent {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>\n          这里是新建周报页面\n        </h1>\n      </div>\n    );\n  }\n}\n\nexport default WeeklyPage;\n","import React, { Component } from 'react';\nimport { Screen, withScreen } from 'react-screen-navigation';\n\nimport DetailPage from './detail';\nimport WeeklyPage from './weekly';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  goToDetailPage = () => {\n    const { go } = this.props;\n    go(\"detail\", { id: 1, name: 'godotdotdot'})\n  }\n  goToWeeklyPage = () => {\n    const { go } = this.props;\n    go(\"weekly\")\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Screen path=\"detail\" component={DetailPage} />\n        <Screen path=\"weekly\" component={WeeklyPage} />\n        <h1>欢迎使用 ReactScreenNavigation</h1>\n        <button onClick={this.goToDetailPage}>查看详情</button>\n        <button onClick={this.goToWeeklyPage}>新建周报</button>\n      </div>\n    );\n  }\n}\n\nexport default withScreen(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { ScreenProvider } from 'react-screen-navigation';\nimport history from './history';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <ScreenProvider history={history}>\n    <App />\n  </ScreenProvider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}